// gestion synchro BDD : doit-on avoir une entité logicielle spécifique et des méthodes spécifiques

module modControledAcces 
{
	struct Date
	{
		string timestamp;
	};
	
	struct InfoZone
	{
		string idZone;
		string libelleZone;
	};
	
	struct InfoSalarie 
	{
		string idSal;
		//string mdp ?  // mélanie : oui, il est dans salarié, pourquoi tu le mets plus ?
		// Landry: pour moi il faut le mettre, je vois pas pourquoi on ne le mettrait pas..
		string nom ;
		string prenom; 
		string photo; 
		string empreinte;  
		Date dateFinValiditeCompte;
		boolean estPermanent;   // melanie : idem, on va en avoir besoin, ca générera le get pour ça,
		// Landry: pour moi il faut le mettre, je vois pas pourquoi on ne le mettrait pas.. Par contre je ne crois pas que ça génère des GET, il faut le définir en tant que attribut pour qu'il y est des GET générés
	};
	
	typedef sequence <InfoZone> ListeZones; 
	typedef sequence <InfoSalarie> ListeSalaries;
	typedef string nom ; 
	typedef string prenom ; 
	typedef string mdp; 
	
// modification Landry - 06-05-2016
//	struct AccesZone
//	{
//		string idSal;
//		string idZone;
//		Date dateDdeAcces;
//		boolean statutAcces;
//		Date jourEntree;
//		Date jourSortie;
//		Date heureEntree;
//		Date heureSortie;
//	};

	struct AccesZone
	{
		string idSal;
		string idZone;
		boolean statutAcces;
		Date jourHeure;
	};
	
	struct EvenementJournalisation 
	{
		AccesZone accesZoneSal;
		string operation; 
		string contenuOperation;			
	};
	
	typedef sequence <EvenementJournalisation> ListeEvenementsJournalisation; 
	
	
	struct AccreditationZone
	{
		string idZone;
		Date dateAcreditation;
		Date jourDebut;
		Date jourFin;
		Date heureDebut;
		Date heureFin;
	};
	
	typedef sequence <AccreditationZone> ListeAccreditationZone; 
	
	struct InfoSalarieAccreditation 
	{
		string idSal;
		ListeAccreditationZone listeAccreditationSal;
	};

	
	
	//typedef sequence <InfoSalarieAccreditation> ListInfoSalarieAccreditation;    // melanie : redondant avec plus haut 
	//Landry: Pour moi ce n'est pas redondant car grâce a cette liste on peut avoir la liste des salariés avec leurs accréditations alors que celle d'avant on a une liste d'accréditation par zone
	//        mais ne l'utilisant pas dans les méthodes, elle est inutile. (pour le moment on souhaite juste retourner pour un salarié donné ses accréditations par zone)
	

	interface EntiteLogiciellePorte
	{
		void afficherMessage();  //deverouillage de la porte 
		//Landry: on le renomme ou pas ? afficherMessage --> deverrouillagePorte ? C'est ce que Teyssier nous avait conseiller. Mais je trouve pas que c'est plus clair...
		
		//pour information dans le code généré : appel de la méthode sauthentifier puis de la méthode verifierCorrespondance
		void demandeEntrerSortirZone(in string idSal, in string idZone);
		void demanderAuthentifier (in string photo);
		void demanderModifierEmpreinte(in string idSal, in string empreinte);
	};
	
	exception EmpreinteIncorrecte {string raisonEmpreinteIncorrecte;};
	exception EmpreinteExistante {string raisonEmpreinteExistante;};
	exception CleInconnue {string raisonCleInconnue;};
	exception ErreurSalarieInexistant {string raisonErreurSalarieInexistant;};
	exception ErreurZoneInexistant {string raisonErreurZoneInexistant;};
	exception ErreurSalarieExistant {string raisonErreurSalarieExistant;};

	
	
	interface EntiteLogicielleEmpreinte
	{
		void ajouterEmpreinte (in string idSal, in string empreinte, in string cleDemandeur) raises (EmpreinteExistante, CleInconnue, EmpreinteIncorrecte);
		//modifierEmpreinte <=> modifier sa propre empreinte
		string modifierEmpreinte(in string idSal, in string empreinte, in string cleDemandeur) raises (EmpreinteExistante, CleInconnue, EmpreinteIncorrecte);
		
		//a garder ??  // melanie : je sais pas ... 
		//Landry: Il me semble que c'était moi qui avait posé cette question ^^
		//        Pour répondre, je pense que cela dépend de comment on fonctionne. 
		//        La méthode permet de demander à Empreinte la correspondance avec une autre empreinte dans le système et si correspondance de retourner l'id du salarié.
		//        Pour s'en servir pour appeler d'autres méthodes. Je ne sais pas si on s'en sert, mais c'est possible que l'on en ait besoin..
		//        Je propose de la garder et si on s'en sert pas pendant la réalisation du code on la supprimera.
		string getCorrespondance (in string empreinte,in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue);
		
		//verifierCorrespondance <=> Vérifier correspondance empreinte et identifiant
		boolean verifierCorrespondance (in string idSal, in string empreinte, in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue, EmpreinteIncorrecte);
		void supprimerEmpreinte(in string idSal, in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue); 
		
	};
	
	interface EntiteLogicielleAutorisation
	{
	
	// qui, ou, quand --> accreditation
	// idSal, zone, quand --> boolean (autorisation)
	
		ListeZones listeToutesZones();
		
		boolean verifierAutorisation(in string idSal, in string idZone) raises (ErreurSalarieInexistant, ErreurZoneInexistant); 
		void creerAccreditation(in string idSal, in string idZone, in Date jourDebut, in Date jourFin, in Date heureDebut, in Date heureFin, in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue, ErreurZoneInexistant);
		InfoSalarieAccreditation lireAccreditationSalarie(in string idSal) raises (ErreurSalarieInexistant);
		InfoSalarieAccreditation modifierAccreditation (in string idSal, in string idZone, in Date jourDebut, in Date jourFin, in Date heureDebut, in Date heureFin, in EntiteLogicielleEmpreinte el_Empreinte) raises (ErreurSalarieInexistant, ErreurZoneInexistant);
		InfoSalarieAccreditation supprimerAccreditation (in string idSal, in string idZone, in EntiteLogicielleEmpreinte el_Empreinte) raises (ErreurSalarieInexistant, ErreurZoneInexistant);

	};
	
	interface EntiteLogicielleAnnuaire 
	{
	
		ListeSalaries listeTousSalaries();
		
		InfoSalarie recupererNomPhotoSalarie(in string idSal, in EntiteLogicielleEmpreinte el_Empreinte) raises (ErreurSalarieInexistant);
		
		InfoSalarie infosSalarie(in string idSal, in EntiteLogicielleEmpreinte el_Empreinte) raises (ErreurSalarieInexistant);

		//retourne l'id d'un salarié
		string creerSalarie(in string mdp, in string nom, in string prenom, in string photo, in Date heureDebut, in Date heureFin, in Date jourDebut, in Date jourFin, in Date dateFinValiditeCompte, in boolean estPermanent) raises (ErreurSalarieExistant);		
		
		//retourne l'id d'un salarié
		string sauthentifier (in string photo) raises (ErreurSalarieInexistant); //erreru d'authentification
	};
	
	interface EntiteLogicielleJournalisation
	{
		ListeEvenementsJournalisation consulter(in string qui, in string  quoi, in string quand_debut, in string quand_fin, in string cleDemandeur) raises (CleInconnue); // "" <> null
		void enregistrerEvenement (in EvenementJournalisation evenementJournalisation);
		
	};
};