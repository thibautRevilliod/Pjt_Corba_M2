// gestion synchro BDD : doit-on avoir une entité logicielle spécifique et des méthodes spécifiques

module modControledAcces 
{
	struct Date
	{
		string timestamp;
	};
	
	struct InfoZone
	{
		string idZone;
		string libelleZone;
	};
	
	struct InfoSalarie 
	{
		string idSal;
			string nom ;
		string prenom; 
		string photo; 
		string empreinte;  
		Date dateFinValiditeCompte;
		boolean estPermanent;
		
	};
	
	struct InfoOperation
	{
		string operation;
	};
	
	typedef sequence <InfoZone> ListeZones; 
	typedef sequence <InfoOperation> ListeOperations; 
	typedef sequence <InfoSalarie> ListeSalaries;
	typedef string nom ; 
	typedef string prenom ; 
	typedef string mdp; 
	

	struct AccesZone
	{
		string idSal;
		string idZone;
		boolean statutAcces;
		Date jourHeure;
	};
	
	struct EvenementJournalisation 
	{
		AccesZone accesZoneSal;
		string operation; 
		string contenuOperation;			
	};
	
	typedef sequence <EvenementJournalisation> ListeEvenementsJournalisation; 
	
	
	struct AccreditationZone
	{
		string idZone;
		Date dateAcreditation;
		Date jourDebut;
		Date jourFin;
		Date heureDebut;
		Date heureFin;
	};
	
	typedef sequence <AccreditationZone> ListeAccreditationZone; 
	
	struct InfoSalarieAccreditation 
	{
		string idSal;
		ListeAccreditationZone listeAccreditationSal;
	};

	
	exception EmpreinteIncorrecte {string raisonEmpreinteIncorrecte;};
	exception EmpreinteExistante {string raisonEmpreinteExistante;};
	exception CleInconnue {string raisonCleInconnue;};
	exception ErreurSalarieInexistant {string raisonErreurSalarieInexistant;};
	exception ErreurZoneInexistant {string raisonErreurZoneInexistant;};
	exception ErreurSalarieExistant {string raisonErreurSalarieExistant;};
	exception ErreurPorteExistant {string raisonErreurPorteExistant;};


	interface EntiteLogiciellePorte
	{
		void afficherMessage();  //deverouillage de la porte 
		
		//pour information dans le code généré : appel de la méthode sauthentifier puis de la méthode verifierCorrespondance
		boolean demandeEntrerSortirZone(in string idSal, in string idZone);
		string demanderAuthentifier (in string photo, in string empreinte);
		void demanderModifierEmpreinte(in string idSal, in string empreinte);
		
		string creerPorte(in string libellePorte, in string idZone) raises (ErreurPorteExistant);		
	};	
	
	interface EntiteLogicielleEmpreinte
	{
		string ajouterEmpreinte (in string idSal, in string empreinte, in string cleDemandeur) raises (EmpreinteExistante, CleInconnue, EmpreinteIncorrecte);
		//modifierEmpreinte <=> modifier sa propre empreinte
		string modifierEmpreinte(in string idSal, in string empreinte, in string cleDemandeur) raises (EmpreinteExistante, CleInconnue, EmpreinteIncorrecte);
		
		string getCorrespondance (in string empreinte,in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue);
		
		//verifierCorrespondance <=> Vérifier correspondance empreinte et identifiant
		boolean verifierCorrespondance (in string idSal, in string empreinte, in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue, EmpreinteIncorrecte);
		string supprimerEmpreinte(in string idSal, in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue); 
		
	};
	
	interface EntiteLogicielleAutorisation
	{
	
	// qui, ou, quand --> accreditation
	// idSal, zone, quand --> boolean (autorisation)
	
		ListeZones listeToutesZones();
		
		boolean verifierAutorisation(in string idSal, in string idZone) raises (ErreurSalarieInexistant, ErreurZoneInexistant); 
		void creerAccreditation(in string idSal, in string idZone, in Date jourDebut, in Date jourFin, in Date heureDebut, in Date heureFin, in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue, ErreurZoneInexistant);
		InfoSalarieAccreditation lireAccreditationSalarie(in string idSal) raises (ErreurSalarieInexistant);
		InfoSalarieAccreditation modifierAccreditation (in string idSal, in string idZone, in Date jourDebut, in Date jourFin, in Date heureDebut, in Date heureFin) raises (ErreurSalarieInexistant, ErreurZoneInexistant);
		InfoSalarieAccreditation supprimerAccreditation (in string idSal, in string idZone) raises (ErreurSalarieInexistant, ErreurZoneInexistant);

	};
	
	interface EntiteLogicielleAnnuaire 
	{
	
		ListeSalaries listeTousSalaries();
		ListeSalaries listeSalariesTemporaires();
		
		InfoSalarie recupererNomPhotoSalarie(in string idSal, in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue);
		
		InfoSalarie infosSalarie(in string idSal, in string cleDemandeur) raises (ErreurSalarieInexistant, CleInconnue);

		//retourne l'id d'un salarié
		string creerSalarie(in string mdp, in string nom, in string prenom, in string photo, in Date heureDebut, in Date heureFin, in Date jourDebut, in Date jourFin, in Date dateFinValiditeCompte, in boolean estPermanent) raises (ErreurSalarieExistant);		
		
		//retourne l'id d'un salarié
		string sauthentifier (in string photo) raises (ErreurSalarieInexistant); //erreru d'authentification
	};
	
	interface EntiteLogicielleJournalisation
	{
		ListeOperations listeOperations();
	
		ListeEvenementsJournalisation consulter(in string qui, in string  quoi, in string quand_debut, in string quand_fin, in string cleDemandeur) raises (CleInconnue); // "" <> null
		void enregistrerEvenement (in EvenementJournalisation evenementJournalisation);
		
	};
};